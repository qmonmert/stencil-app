/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { MyBackdrop as MyBackdrop } from './components/my-backdrop/my-backdrop';

interface HTMLMyBackdropElement extends MyBackdrop, HTMLElement {
}
declare var HTMLMyBackdropElement: {
  prototype: HTMLMyBackdropElement;
  new (): HTMLMyBackdropElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-backdrop": HTMLMyBackdropElement;
  }
  interface ElementTagNameMap {
      "my-backdrop": HTMLMyBackdropElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-backdrop": JSXElements.MyBackdropAttributes;
      }
  }
  namespace JSXElements {
      export interface MyBackdropAttributes extends HTMLAttributes {
        
      }
  }
}

import { MyModalBundle as MyModalBundle } from './components/my-modal-bundle/my-modal-bundle';

interface HTMLMyModalBundleElement extends MyModalBundle, HTMLElement {
}
declare var HTMLMyModalBundleElement: {
  prototype: HTMLMyModalBundleElement;
  new (): HTMLMyModalBundleElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-modal-bundle": HTMLMyModalBundleElement;
  }
  interface ElementTagNameMap {
      "my-modal-bundle": HTMLMyModalBundleElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-modal-bundle": JSXElements.MyModalBundleAttributes;
      }
  }
  namespace JSXElements {
      export interface MyModalBundleAttributes extends HTMLAttributes {
        
          open?: any,
          title?: any,
          content?: any
      }
  }
}

import { MyModal as MyModal } from './components/my-modal/my-modal';

interface HTMLMyModalElement extends MyModal, HTMLElement {
}
declare var HTMLMyModalElement: {
  prototype: HTMLMyModalElement;
  new (): HTMLMyModalElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-modal": HTMLMyModalElement;
  }
  interface ElementTagNameMap {
      "my-modal": HTMLMyModalElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-modal": JSXElements.MyModalAttributes;
      }
  }
  namespace JSXElements {
      export interface MyModalAttributes extends HTMLAttributes {
        
          title?: any,
          content?: any
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
        
          first?: any,
          last?: any
      }
  }
}

